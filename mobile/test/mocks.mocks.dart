// Mocks generated by Mockito 5.4.6 from annotations
// in vegito/test/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i11;
import 'dart:ui' as _i12;

import 'package:vegito/auth/auth_provider.dart' as _i8;
import 'package:vegito/auth/auth_service.dart' as _i13;
import 'package:vegito/cart/cart_provider.dart' as _i14;
import 'package:vegito/order/order_model.dart' as _i3;
import 'package:vegito/order/order_provider.dart' as _i15;
import 'package:vegito/order/order_service.dart' as _i16;
import 'package:vegito/user/user_model.dart' as _i18;
import 'package:vegito/user/user_provider.dart' as _i17;
import 'package:vegito/user/user_service.dart' as _i5;
import 'package:vegito/vegetable/vegetable_list_provider.dart' as _i19;
import 'package:vegito/vegetable/vegetable_model.dart' as _i7;
import 'package:vegito/vegetable/vegetable_service.dart' as _i6;
import 'package:firebase_auth/firebase_auth.dart' as _i4;
import 'package:flutter/material.dart' as _i10;
import 'package:flutter_image_compress/flutter_image_compress.dart' as _i20;
import 'package:http/http.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeClient_0 extends _i1.SmartFake implements _i2.Client {
  _FakeClient_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeOrder_1 extends _i1.SmartFake implements _i3.Order {
  _FakeOrder_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserMetadata_2 extends _i1.SmartFake implements _i4.UserMetadata {
  _FakeUserMetadata_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMultiFactor_3 extends _i1.SmartFake implements _i4.MultiFactor {
  _FakeMultiFactor_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeIdTokenResult_4 extends _i1.SmartFake implements _i4.IdTokenResult {
  _FakeIdTokenResult_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserCredential_5 extends _i1.SmartFake
    implements _i4.UserCredential {
  _FakeUserCredential_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeConfirmationResult_6 extends _i1.SmartFake
    implements _i4.ConfirmationResult {
  _FakeConfirmationResult_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUser_7 extends _i1.SmartFake implements _i4.User {
  _FakeUser_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserService_8 extends _i1.SmartFake implements _i5.UserService {
  _FakeUserService_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeVegetableService_9 extends _i1.SmartFake
    implements _i6.VegetableService {
  _FakeVegetableService_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeVegetable_10 extends _i1.SmartFake implements _i7.Vegetable {
  _FakeVegetable_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AuthProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthProvider extends _i1.Mock implements _i8.AuthProvider {
  MockAuthProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isAuthenticated => (super.noSuchMethod(
        Invocation.getter(#isAuthenticated),
        returnValue: false,
      ) as bool);

  @override
  bool get isAnonymous => (super.noSuchMethod(
        Invocation.getter(#isAnonymous),
        returnValue: false,
      ) as bool);

  @override
  String get balance => (super.noSuchMethod(
        Invocation.getter(#balance),
        returnValue: _i9.dummyValue<String>(
          this,
          Invocation.getter(#balance),
        ),
      ) as String);

  @override
  bool get loadingBalance => (super.noSuchMethod(
        Invocation.getter(#loadingBalance),
        returnValue: false,
      ) as bool);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  void setContext(_i10.BuildContext? context) => super.noSuchMethod(
        Invocation.method(
          #setContext,
          [context],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i11.Future<void> signInWithGoogle() => (super.noSuchMethod(
        Invocation.method(
          #signInWithGoogle,
          [],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  _i11.Future<void> signInWithFacebook() => (super.noSuchMethod(
        Invocation.method(
          #signInWithFacebook,
          [],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  _i11.Future<void> upgradeWithEmail(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #upgradeWithEmail,
          [
            email,
            password,
          ],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  _i11.Future<void> loadBalance() => (super.noSuchMethod(
        Invocation.method(
          #loadBalance,
          [],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i12.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i12.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [AuthService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthService extends _i1.Mock implements _i13.AuthService {
  MockAuthService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.Future<_i4.User?> ensureSignedIn() => (super.noSuchMethod(
        Invocation.method(
          #ensureSignedIn,
          [],
        ),
        returnValue: _i11.Future<_i4.User?>.value(),
      ) as _i11.Future<_i4.User?>);

  @override
  _i11.Future<void> upgradeWithEmail(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #upgradeWithEmail,
          [
            email,
            password,
          ],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  _i11.Future<void> signOut() => (super.noSuchMethod(
        Invocation.method(
          #signOut,
          [],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  _i11.Future<_i4.UserCredential?> signInWithGoogle() => (super.noSuchMethod(
        Invocation.method(
          #signInWithGoogle,
          [],
        ),
        returnValue: _i11.Future<_i4.UserCredential?>.value(),
      ) as _i11.Future<_i4.UserCredential?>);

  @override
  _i11.Future<_i4.UserCredential?> signInWithFacebook() => (super.noSuchMethod(
        Invocation.method(
          #signInWithFacebook,
          [],
        ),
        returnValue: _i11.Future<_i4.UserCredential?>.value(),
      ) as _i11.Future<_i4.UserCredential?>);
}

/// A class which mocks [CartProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockCartProvider extends _i1.Mock implements _i14.CartProvider {
  MockCartProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Map<_i7.Vegetable, int> get items => (super.noSuchMethod(
        Invocation.getter(#items),
        returnValue: <_i7.Vegetable, int>{},
      ) as Map<_i7.Vegetable, int>);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  void add(
    _i7.Vegetable? vegetable, {
    int? quantity = 1,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #add,
          [vegetable],
          {#quantity: quantity},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void remove(_i7.Vegetable? vegetable) => super.noSuchMethod(
        Invocation.method(
          #remove,
          [vegetable],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void clear() => super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i12.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i12.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [OrderProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockOrderProvider extends _i1.Mock implements _i15.OrderProvider {
  MockOrderProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i3.Order> get orders => (super.noSuchMethod(
        Invocation.getter(#orders),
        returnValue: <_i3.Order>[],
      ) as List<_i3.Order>);

  @override
  bool get isLoading => (super.noSuchMethod(
        Invocation.getter(#isLoading),
        returnValue: false,
      ) as bool);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i11.Future<void> loadOrdersForUser(String? userId) => (super.noSuchMethod(
        Invocation.method(
          #loadOrdersForUser,
          [userId],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  _i11.Future<void> validateCartOrders(
    String? clientId,
    Map<String, int>? cartItems,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #validateCartOrders,
          [
            clientId,
            cartItems,
          ],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  _i11.Future<List<_i3.Order>> loadOrdersByVegetableIds(
          List<String>? vegetableIds) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadOrdersByVegetableIds,
          [vegetableIds],
        ),
        returnValue: _i11.Future<List<_i3.Order>>.value(<_i3.Order>[]),
      ) as _i11.Future<List<_i3.Order>>);

  @override
  _i11.Future<void> updateOrderStatus(
    String? orderId,
    String? status,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateOrderStatus,
          [
            orderId,
            status,
          ],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  void addListener(_i12.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i12.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [OrderService].
///
/// See the documentation for Mockito's code generation for more information.
class MockOrderService extends _i1.Mock implements _i16.OrderService {
  MockOrderService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Client get client => (super.noSuchMethod(
        Invocation.getter(#client),
        returnValue: _FakeClient_0(
          this,
          Invocation.getter(#client),
        ),
      ) as _i2.Client);

  @override
  String get backendUrl => (super.noSuchMethod(
        Invocation.getter(#backendUrl),
        returnValue: _i9.dummyValue<String>(
          this,
          Invocation.getter(#backendUrl),
        ),
      ) as String);

  @override
  _i11.Future<void> createOrder({
    required String? vegetableId,
    required String? clientId,
    required int? quantity,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createOrder,
          [],
          {
            #vegetableId: vegetableId,
            #clientId: clientId,
            #quantity: quantity,
          },
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  _i11.Future<List<_i3.Order>> listByVegetableIds(List<String>? vegetableIds) =>
      (super.noSuchMethod(
        Invocation.method(
          #listByVegetableIds,
          [vegetableIds],
        ),
        returnValue: _i11.Future<List<_i3.Order>>.value(<_i3.Order>[]),
      ) as _i11.Future<List<_i3.Order>>);

  @override
  _i11.Future<void> updateStatus(
    String? orderId,
    String? status,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateStatus,
          [
            orderId,
            status,
          ],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  _i11.Future<List<_i3.Order>> listByClientId(String? clientId) =>
      (super.noSuchMethod(
        Invocation.method(
          #listByClientId,
          [clientId],
        ),
        returnValue: _i11.Future<List<_i3.Order>>.value(<_i3.Order>[]),
      ) as _i11.Future<List<_i3.Order>>);

  @override
  _i11.Future<_i3.Order> getOrder(String? orderId) => (super.noSuchMethod(
        Invocation.method(
          #getOrder,
          [orderId],
        ),
        returnValue: _i11.Future<_i3.Order>.value(_FakeOrder_1(
          this,
          Invocation.method(
            #getOrder,
            [orderId],
          ),
        )),
      ) as _i11.Future<_i3.Order>);

  @override
  _i11.Future<void> deleteOrder(String? orderId) => (super.noSuchMethod(
        Invocation.method(
          #deleteOrder,
          [orderId],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);
}

/// A class which mocks [User].
///
/// See the documentation for Mockito's code generation for more information.
class MockUser extends _i1.Mock implements _i4.User {
  MockUser() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get emailVerified => (super.noSuchMethod(
        Invocation.getter(#emailVerified),
        returnValue: false,
      ) as bool);

  @override
  bool get isAnonymous => (super.noSuchMethod(
        Invocation.getter(#isAnonymous),
        returnValue: false,
      ) as bool);

  @override
  _i4.UserMetadata get metadata => (super.noSuchMethod(
        Invocation.getter(#metadata),
        returnValue: _FakeUserMetadata_2(
          this,
          Invocation.getter(#metadata),
        ),
      ) as _i4.UserMetadata);

  @override
  List<_i4.UserInfo> get providerData => (super.noSuchMethod(
        Invocation.getter(#providerData),
        returnValue: <_i4.UserInfo>[],
      ) as List<_i4.UserInfo>);

  @override
  String get uid => (super.noSuchMethod(
        Invocation.getter(#uid),
        returnValue: _i9.dummyValue<String>(
          this,
          Invocation.getter(#uid),
        ),
      ) as String);

  @override
  _i4.MultiFactor get multiFactor => (super.noSuchMethod(
        Invocation.getter(#multiFactor),
        returnValue: _FakeMultiFactor_3(
          this,
          Invocation.getter(#multiFactor),
        ),
      ) as _i4.MultiFactor);

  @override
  _i11.Future<void> delete() => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  _i11.Future<String?> getIdToken([bool? forceRefresh = false]) =>
      (super.noSuchMethod(
        Invocation.method(
          #getIdToken,
          [forceRefresh],
        ),
        returnValue: _i11.Future<String?>.value(),
      ) as _i11.Future<String?>);

  @override
  _i11.Future<_i4.IdTokenResult> getIdTokenResult(
          [bool? forceRefresh = false]) =>
      (super.noSuchMethod(
        Invocation.method(
          #getIdTokenResult,
          [forceRefresh],
        ),
        returnValue: _i11.Future<_i4.IdTokenResult>.value(_FakeIdTokenResult_4(
          this,
          Invocation.method(
            #getIdTokenResult,
            [forceRefresh],
          ),
        )),
      ) as _i11.Future<_i4.IdTokenResult>);

  @override
  _i11.Future<_i4.UserCredential> linkWithCredential(
          _i4.AuthCredential? credential) =>
      (super.noSuchMethod(
        Invocation.method(
          #linkWithCredential,
          [credential],
        ),
        returnValue:
            _i11.Future<_i4.UserCredential>.value(_FakeUserCredential_5(
          this,
          Invocation.method(
            #linkWithCredential,
            [credential],
          ),
        )),
      ) as _i11.Future<_i4.UserCredential>);

  @override
  _i11.Future<_i4.UserCredential> linkWithProvider(
          _i4.AuthProvider? provider) =>
      (super.noSuchMethod(
        Invocation.method(
          #linkWithProvider,
          [provider],
        ),
        returnValue:
            _i11.Future<_i4.UserCredential>.value(_FakeUserCredential_5(
          this,
          Invocation.method(
            #linkWithProvider,
            [provider],
          ),
        )),
      ) as _i11.Future<_i4.UserCredential>);

  @override
  _i11.Future<_i4.UserCredential> reauthenticateWithProvider(
          _i4.AuthProvider? provider) =>
      (super.noSuchMethod(
        Invocation.method(
          #reauthenticateWithProvider,
          [provider],
        ),
        returnValue:
            _i11.Future<_i4.UserCredential>.value(_FakeUserCredential_5(
          this,
          Invocation.method(
            #reauthenticateWithProvider,
            [provider],
          ),
        )),
      ) as _i11.Future<_i4.UserCredential>);

  @override
  _i11.Future<_i4.UserCredential> reauthenticateWithPopup(
          _i4.AuthProvider? provider) =>
      (super.noSuchMethod(
        Invocation.method(
          #reauthenticateWithPopup,
          [provider],
        ),
        returnValue:
            _i11.Future<_i4.UserCredential>.value(_FakeUserCredential_5(
          this,
          Invocation.method(
            #reauthenticateWithPopup,
            [provider],
          ),
        )),
      ) as _i11.Future<_i4.UserCredential>);

  @override
  _i11.Future<void> reauthenticateWithRedirect(_i4.AuthProvider? provider) =>
      (super.noSuchMethod(
        Invocation.method(
          #reauthenticateWithRedirect,
          [provider],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  _i11.Future<_i4.UserCredential> linkWithPopup(_i4.AuthProvider? provider) =>
      (super.noSuchMethod(
        Invocation.method(
          #linkWithPopup,
          [provider],
        ),
        returnValue:
            _i11.Future<_i4.UserCredential>.value(_FakeUserCredential_5(
          this,
          Invocation.method(
            #linkWithPopup,
            [provider],
          ),
        )),
      ) as _i11.Future<_i4.UserCredential>);

  @override
  _i11.Future<void> linkWithRedirect(_i4.AuthProvider? provider) =>
      (super.noSuchMethod(
        Invocation.method(
          #linkWithRedirect,
          [provider],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  _i11.Future<_i4.ConfirmationResult> linkWithPhoneNumber(
    String? phoneNumber, [
    _i4.RecaptchaVerifier? verifier,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #linkWithPhoneNumber,
          [
            phoneNumber,
            verifier,
          ],
        ),
        returnValue:
            _i11.Future<_i4.ConfirmationResult>.value(_FakeConfirmationResult_6(
          this,
          Invocation.method(
            #linkWithPhoneNumber,
            [
              phoneNumber,
              verifier,
            ],
          ),
        )),
      ) as _i11.Future<_i4.ConfirmationResult>);

  @override
  _i11.Future<_i4.UserCredential> reauthenticateWithCredential(
          _i4.AuthCredential? credential) =>
      (super.noSuchMethod(
        Invocation.method(
          #reauthenticateWithCredential,
          [credential],
        ),
        returnValue:
            _i11.Future<_i4.UserCredential>.value(_FakeUserCredential_5(
          this,
          Invocation.method(
            #reauthenticateWithCredential,
            [credential],
          ),
        )),
      ) as _i11.Future<_i4.UserCredential>);

  @override
  _i11.Future<void> reload() => (super.noSuchMethod(
        Invocation.method(
          #reload,
          [],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  _i11.Future<void> sendEmailVerification(
          [_i4.ActionCodeSettings? actionCodeSettings]) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendEmailVerification,
          [actionCodeSettings],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  _i11.Future<_i4.User> unlink(String? providerId) => (super.noSuchMethod(
        Invocation.method(
          #unlink,
          [providerId],
        ),
        returnValue: _i11.Future<_i4.User>.value(_FakeUser_7(
          this,
          Invocation.method(
            #unlink,
            [providerId],
          ),
        )),
      ) as _i11.Future<_i4.User>);

  @override
  _i11.Future<void> updateEmail(String? newEmail) => (super.noSuchMethod(
        Invocation.method(
          #updateEmail,
          [newEmail],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  _i11.Future<void> updatePassword(String? newPassword) => (super.noSuchMethod(
        Invocation.method(
          #updatePassword,
          [newPassword],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  _i11.Future<void> updatePhoneNumber(
          _i4.PhoneAuthCredential? phoneCredential) =>
      (super.noSuchMethod(
        Invocation.method(
          #updatePhoneNumber,
          [phoneCredential],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  _i11.Future<void> updateDisplayName(String? displayName) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateDisplayName,
          [displayName],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  _i11.Future<void> updatePhotoURL(String? photoURL) => (super.noSuchMethod(
        Invocation.method(
          #updatePhotoURL,
          [photoURL],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  _i11.Future<void> updateProfile({
    String? displayName,
    String? photoURL,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateProfile,
          [],
          {
            #displayName: displayName,
            #photoURL: photoURL,
          },
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  _i11.Future<void> verifyBeforeUpdateEmail(
    String? newEmail, [
    _i4.ActionCodeSettings? actionCodeSettings,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #verifyBeforeUpdateEmail,
          [
            newEmail,
            actionCodeSettings,
          ],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);
}

/// A class which mocks [UserProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserProvider extends _i1.Mock implements _i17.UserProvider {
  MockUserProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.UserService get service => (super.noSuchMethod(
        Invocation.getter(#service),
        returnValue: _FakeUserService_8(
          this,
          Invocation.getter(#service),
        ),
      ) as _i5.UserService);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i18.UserProfile? getCurrentUser(String? userId) =>
      (super.noSuchMethod(Invocation.method(
        #getCurrentUser,
        [userId],
      )) as _i18.UserProfile?);

  @override
  _i11.Future<void> loadUser(String? userId) => (super.noSuchMethod(
        Invocation.method(
          #loadUser,
          [userId],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  _i11.Future<_i18.UserProfile?> getUser(String? userId) => (super.noSuchMethod(
        Invocation.method(
          #getUser,
          [userId],
        ),
        returnValue: _i11.Future<_i18.UserProfile?>.value(),
      ) as _i11.Future<_i18.UserProfile?>);

  @override
  _i11.Future<void> updateUser(_i18.UserProfile? user) => (super.noSuchMethod(
        Invocation.method(
          #updateUser,
          [user],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  _i11.Future<void> updateUserAddress(
    String? userId,
    Map<String, dynamic>? updates,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateUserAddress,
          [
            userId,
            updates,
          ],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  _i11.Future<void> updateDisplayName(
    String? userId,
    String? displayName,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateDisplayName,
          [
            userId,
            displayName,
          ],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  _i11.Future<void> setUserReputationOptIn(
    String? userId,
    bool? enabled,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setUserReputationOptIn,
          [
            userId,
            enabled,
          ],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  void addListener(_i12.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i12.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [VegetableListProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockVegetableListProvider extends _i1.Mock
    implements _i19.VegetableListProvider {
  MockVegetableListProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.VegetableService get service => (super.noSuchMethod(
        Invocation.getter(#service),
        returnValue: _FakeVegetableService_9(
          this,
          Invocation.getter(#service),
        ),
      ) as _i6.VegetableService);

  @override
  List<_i7.Vegetable> get vegetables => (super.noSuchMethod(
        Invocation.getter(#vegetables),
        returnValue: <_i7.Vegetable>[],
      ) as List<_i7.Vegetable>);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i11.Future<void> reload() => (super.noSuchMethod(
        Invocation.method(
          #reload,
          [],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  _i11.Future<List<_i7.Vegetable>> findByIds(List<String>? ids) =>
      (super.noSuchMethod(
        Invocation.method(
          #findByIds,
          [ids],
        ),
        returnValue: _i11.Future<List<_i7.Vegetable>>.value(<_i7.Vegetable>[]),
      ) as _i11.Future<List<_i7.Vegetable>>);

  @override
  List<_i7.Vegetable> vegetablesByOwner(String? uid) => (super.noSuchMethod(
        Invocation.method(
          #vegetablesByOwner,
          [uid],
        ),
        returnValue: <_i7.Vegetable>[],
      ) as List<_i7.Vegetable>);

  @override
  void addListener(_i12.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i12.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [VegetableService].
///
/// See the documentation for Mockito's code generation for more information.
class MockVegetableService extends _i1.Mock implements _i6.VegetableService {
  MockVegetableService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Client get client => (super.noSuchMethod(
        Invocation.getter(#client),
        returnValue: _FakeClient_0(
          this,
          Invocation.getter(#client),
        ),
      ) as _i2.Client);

  @override
  String get backendUrl => (super.noSuchMethod(
        Invocation.getter(#backendUrl),
        returnValue: _i9.dummyValue<String>(
          this,
          Invocation.getter(#backendUrl),
        ),
      ) as String);

  @override
  _i11.Future<List<_i7.Vegetable>> listVegetables() => (super.noSuchMethod(
        Invocation.method(
          #listVegetables,
          [],
        ),
        returnValue: _i11.Future<List<_i7.Vegetable>>.value(<_i7.Vegetable>[]),
      ) as _i11.Future<List<_i7.Vegetable>>);

  @override
  _i11.Future<_i7.Vegetable> getVegetable(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getVegetable,
          [id],
        ),
        returnValue: _i11.Future<_i7.Vegetable>.value(_FakeVegetable_10(
          this,
          Invocation.method(
            #getVegetable,
            [id],
          ),
        )),
      ) as _i11.Future<_i7.Vegetable>);

  @override
  _i11.Future<_i7.Vegetable> createVegetable(_i7.Vegetable? vegetable) =>
      (super.noSuchMethod(
        Invocation.method(
          #createVegetable,
          [vegetable],
        ),
        returnValue: _i11.Future<_i7.Vegetable>.value(_FakeVegetable_10(
          this,
          Invocation.method(
            #createVegetable,
            [vegetable],
          ),
        )),
      ) as _i11.Future<_i7.Vegetable>);

  @override
  _i11.Future<void> updateVegetable(
    String? id,
    _i7.Vegetable? vegetable,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateVegetable,
          [
            id,
            vegetable,
          ],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  _i11.Future<void> deleteVegetable(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteVegetable,
          [id],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  _i11.Future<List<_i7.VegetableImage>> uploadImages({
    required String? userId,
    required List<_i20.XFile>? images,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #uploadImages,
          [],
          {
            #userId: userId,
            #images: images,
          },
        ),
        returnValue:
            _i11.Future<List<_i7.VegetableImage>>.value(<_i7.VegetableImage>[]),
      ) as _i11.Future<List<_i7.VegetableImage>>);
}
