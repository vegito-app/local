permissions:
  id-token: write
  contents: write
name: Build and Push Release Docker Images And Artifacts üì¶
on:
  push:
    branches:
      - main
jobs:
  build-release-change-log:
    name: Build Release Change Log  üß±
    runs-on: self-hosted
    outputs:
      version: ${{ steps.define_version.outputs.VERSION }}
      changelog: ${{ steps.define_version.outputs.CHANGELOG }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Define VERSION
        id: define_version
        run: |
          git config --global user.name "GitHub Action"
          git config --global user.email "build-and-push-images-action@github.com"
          # Bump the version based on commit messages (default patch bump)
          standard-version
          version=$(git describe --tags --abbrev=7 --match 'v*')
          echo "VERSION=$version"
          echo "Commit release bump and tag will be pushed after build success"
          echo "VERSION=${version}" >> $GITHUB_ENV
          echo "VERSION=${version}" >> $GITHUB_OUTPUT
          git fetch --tags
          echo "## Changelog for ${version}" > CHANGELOG.new.md

          conventional-changelog -p angular -r 1 >> CHANGELOG.new.md
          if [ -f CHANGELOG.md ]; then cat CHANGELOG.md >> CHANGELOG.new.md; fi
          mv CHANGELOG.new.md CHANGELOG.md
          cat CHANGELOG.md
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          cat CHANGELOG.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  build-release-infos:
    strategy:
      matrix:
        environment: [dev, staging, prod]
    name: Build GCP project info for ${{ matrix.environment }} üß±
    runs-on: self-hosted
    needs: build-release-change-log
    environment: ${{ matrix.environment }}
    env:
      GOOGLE_CLOUD_PROJECT_ID: ${{ secrets.GOOGLE_CLOUD_PROJECT_ID }}
      VERSION: ${{ needs.build-release-change-log.outputs.version }}
      WORKLOAD_IDENTITY_PROVIDER: projects/${{ secrets.GOOGLE_CLOUD_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/${{ vars.WORKLOAD_IDENTITY_POOL_ID }}/providers/${{ vars.WORKLOAD_IDENTITY_PROVIDER_ID }}
    outputs:
      version: ${{ needs.build-release-change-log.outputs.version }}
      changelog: ${{ needs.build-release-change-log.outputs.changelog }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Use VERSION
        run: echo "Current version is ${{ env.VERSION }}"
      - name: Authenticate to Google Cloud via Workload Identity Federation
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: github-actions-main@${{ env.GOOGLE_CLOUD_PROJECT_ID }}.iam.gserviceaccount.com
          project_id: ${{ env.GOOGLE_CLOUD_PROJECT_ID }}
          token_format: "access_token"
          export_environment_variables: true
      - name: Set up Cloud SDK
        run: |
          make gcloud-config-set-project
      - name: üê≥ Retrieve GCP project informations
        run: |
          mkdir -p artifacts/metadata
          {
            echo "### üê≥ [ ${{ matrix.environment }} ] Docker Repositories (GCR/GAR)"
            echo ""
            echo "#### [ ${{ matrix.environment }} ] Public Repository"
            echo "\`\`\`bash"
            make gcloud-images-list-public
            echo "\`\`\`"
            echo ""
            echo "#### [ ${{ matrix.environment }} ] Private Repository"
            echo "\`\`\`bash"
            make gcloud-images-list
            echo "\`\`\`"
            echo ""
            echo "#### Enabled APIs"
            echo "\`\`\`bash"
            make gcloud-services-list-enabled
            echo "\`\`\`"
            echo ""
          } | tee artifacts/metadata/gcloud-${{ matrix.environment }}-infos.md

      - name: Upload metadata as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: gcloud-metadata-${{ env.VERSION }}-${{ matrix.environment }}
          path: |
            artifacts/metadata/gcloud-${{ matrix.environment }}-infos.md

  create-consolidated-release:
    name: Create Consolidated GitHub Release ‚ú®
    runs-on: self-hosted
    needs:
      - build-release-change-log
      - build-release-infos
    env:
      VERSION: ${{ needs.build-release-infos.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Write changelog from previous step
        run: |
          echo "${{ needs.build-release-infos.outputs.changelog }}" > CHANGELOG.md
      - name: Ensure artifacts directory exists
        run: mkdir -p ./artifacts
      - name: Download all artifacts üì•
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
      - name: Append GCP project infos to changelog
        run: |
          echo -e "\n\n---\n\n" >> CHANGELOG.md
          echo "### üê≥ Docker Images (GCR/GAR)" >> CHANGELOG.md
          find ./artifacts -type f -name "gcloud-*-infos.md" -exec cat {} \; >> CHANGELOG.md
      - name: Create GitHub Release ‚ú®
        uses: softprops/action-gh-release@v2
        with:
          tag_name: main-${{ env.VERSION }}
          name: Release ${{ env.VERSION }}
          body_path: ./CHANGELOG.md
          files: |
            ./artifacts/**/*.md
            ./artifacts/**/*.MD
            CHANGELOG.md

  upload-docker-tags-to-gcs:
    strategy:
      matrix:
        environment: [dev, staging, prod]
    name: Upload Docker Tags to GCS
    runs-on: self-hosted
    needs: [create-consolidated-release, build-release-infos]
    environment: ${{ matrix.environment }}
    env:
      VERSION: ${{ needs.build-release-infos.outputs.version }}
      VEGITO_PROJECT_USER: gha-${{ github.run_id }}
      GOOGLE_CLOUD_PROJECT_ID: ${{ secrets.GOOGLE_CLOUD_PROJECT_ID }}
      GOOGLE_CLOUD_PROJECT_NUMBER: ${{ secrets.GOOGLE_CLOUD_PROJECT_NUMBER }}
      WORKLOAD_IDENTITY_PROVIDER: projects/${{ secrets.GOOGLE_CLOUD_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/${{ vars.WORKLOAD_IDENTITY_POOL_ID }}/providers/${{ vars.WORKLOAD_IDENTITY_PROVIDER_ID }}
      INFRA_ENV: ${{ matrix.environment }}
      GCS_BUCKET: gs://vegito-ci-artifacts-${{ secrets.GOOGLE_CLOUD_PROJECT_ID }}
      GCS_BUCKET_NAME: vegito-app-${{ matrix.environment }}-github-actions-ci-artifacts
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set VERSION
        run: echo "VERSION=${{ env.VERSION }}" >> $GITHUB_ENV
      - name: Authenticate to Google Cloud via Workload Identity Federation
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: github-actions-main@${{ env.GOOGLE_CLOUD_PROJECT_ID }}.iam.gserviceaccount.com
          project_id: ${{ env.GOOGLE_CLOUD_PROJECT_ID }}
          token_format: "access_token"
          export_environment_variables: true
      - name: Download gcloud-metadata artifact
        uses: actions/download-artifact@v4
        with:
          name: gcloud-metadata-${{ env.VERSION }}-${{ matrix.environment }}
          path: .
      - name: Generate index.json for release root
        run: |
          echo '{"env": "'"${INFRA_ENV}"'", "versions": [' > index.json
          for f in $(gcloud storage ls "gs://${GCS_BUCKET_NAME}/${GITHUB_REPOSITORY}/v*/metadata.json" 2>/dev/null || true); do
            version=$(basename $(dirname "$f"))
            echo "  {\"version\": \"$version\"}," >> index.json
          done
          sed -i '$ s/},/}/' index.json || true
          echo ']}' >> index.json
      - name: Upload Docker Tags and Index to GCS
        env:
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          gs_path_github_repo="${GCS_BUCKET_NAME}/${GITHUB_REPOSITORY}"
          gcloud storage cp gcloud-${{ matrix.environment }}-infos.md "gs://$gs_path_github_repo/${VERSION}/gcloud-infos.md" --quiet
          gcloud storage cp index.json "gs://$gs_path_github_repo/index.json" --quiet

      - name: Upload metadata.json and APK/AAB to GCS
        run: |
          gs_path="${GCS_BUCKET_NAME}/${GITHUB_REPOSITORY}/${VERSION}"
          mkdir -p temp_metadata
          METADATA_PATH=temp_metadata/metadata.json
          cat <<EOF > $METADATA_PATH
          {
            "version": "${VERSION}",
            "changelog": "https://storage.googleapis.com/${gs_path}/CHANGELOG.md",
            "dockerImages": "https://storage.googleapis.com/${gs_path}/docker-images.md",
          }
          EOF

          gcloud storage cp "$METADATA_PATH" "gs://$gs_path/metadata.json" --quiet

  release-finalize:
    name: Finalize and Push Release Tag
    runs-on: self-hosted
    needs:
      - create-consolidated-release
    if: success()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Reset to clean state
        run: |
          git fetch origin main
          git reset --hard origin/main

      - name: üîç Run Gitleaks (non-blocking)
        run: |
          gitleaks detect \
            --source . \
            --report-path ./artifacts/security/gitleaks-report.json \
            --log-opts "--all" \
            --exit-code 1 || true
      - name: Upload Gitleaks report as artifact
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-report
          path: ./artifacts/security/gitleaks-report.json
      # - name: Fail if leaks found
      #   run: |
      #     if grep -q '"line":' gitleaks-report.json; then
      #       echo "üö® Secrets found, stopping build!"
      #       exit 1
      #     fi
      - name: Recreate version tag
        run: |
          git config --global user.name "GitHub Action"
          git config --global user.email "build-and-push-images-action@github.com"
          standard-version

      - name: Push tag if all builds succeeded
        run: |
          git push origin HEAD --follow-tags
